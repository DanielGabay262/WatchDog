#ifndef SCHEDULER_H
#define SCHEDULER_H

#include <stddef.h> /*size_t*/

#include "task.h"
#include "p_queue.h"


struct scheduler
{
	priority_queue_t *queue;
	task_t *task;
	int flag;  
};


typedef struct scheduler scheduler_t;




/******************************************************************************************************************************************
                                        				create
*******************************************************************************************************************************************
DESCRIPTION
	create a scheduler.
ARGUMENTS
	none.
RETURN VALUE
	in success - pointer to the new scheduler.
	in failure - NULL.
complexity - o(1).
*****************************************************************************************************************************************/
scheduler_t *SchedulerCreate();





/*****************************************************************************************************************************************
                                        				Destroy
******************************************************************************************************************************************
DESCRIPTION
	free the scheduler.
ARGUMENTS
	scheduler - pointer to scheduler.
RETURN VALUE
	none.
complexity - o(n).
****************************************************************************************************************************************/
void SchedulerDestroy(scheduler_t *scheduler);






/*****************************************************************************************************************************************
                                        				AddTask
******************************************************************************************************************************************
DESCRIPTION
	add task to the scheduler.
ARGUMENTS
	scheduler - pointer to scheduler.
	time_interval - number of second.
	task_func - pointer to function.
	param - pointer to data.
RETURN VALUE
	uid of the new task.
complexity - o(1).
****************************************************************************************************************************************/
ilrd_uid_t SchedulerAddTask(scheduler_t *scheduler, size_t time_interval, int(*task_func)(void *param), void *param);





/*****************************************************************************************************************************************
                                        				RemoveTask
******************************************************************************************************************************************
DESCRIPTION
	remove task from the scheduler.
ARGUMENTS
	scheduler - pointer to scheduler.
	uid- the uid of the task.
RETURN VALUE
	0 - success.
	1 - not success.
complexity - o(1).
****************************************************************************************************************************************/
int SchedulerRemoveTask(scheduler_t *scheduler, ilrd_uid_t uid);





/****************************************************************************************************************************************
                                        				Run
*****************************************************************************************************************************************
DESCRIPTION
	run the tasks in the scheduler.
ARGUMENTS
	scheduler - pointer to scheduler.
RETURN VALUE
	0 - stop
	1 - queue empty
	2 - error 
complexity - o(n).
****************************************************************************************************************************************/
int SchedulerRun(scheduler_t *scheduler);




/****************************************************************************************************************************************
                                        				Stop
*****************************************************************************************************************************************
DESCRIPTION
	stop the tasks run.
ARGUMENTS
	scheduler - pointer to scheduler.
RETURN VALUE
	none.
complexity - o(n).
****************************************************************************************************************************************/
void SchedulerStop(scheduler_t *scheduler);






/****************************************************************************************************************************************
                                        				Size
*****************************************************************************************************************************************
DESCRIPTION
	return the number of tasks in the scheduler.
ARGUMENTS
	scheduler - pointer to scheduler.
RETURN VALUE
	number of tasks in the scheduler.
complexity - o(n).
****************************************************************************************************************************************/
size_t SchedulerSize(scheduler_t *scheduler);






/****************************************************************************************************************************************
                                        				IsEmpty
*****************************************************************************************************************************************
DESCRIPTION
	check if the scheduler is empty.
ARGUMENTS
	scheduler - pointer to scheduler.
RETURN VALUE
	1 - empty.
	0 - not empty.
complexity - o(1).
****************************************************************************************************************************************/
int SchedulerIsEmpty(scheduler_t *scheduler);






/****************************************************************************************************************************************
                                        				Clear
*****************************************************************************************************************************************
DESCRIPTION
	clear thr scheduler.
ARGUMENTS
	scheduler - pointer to scheduler.
RETURN VALUE
	none.
complexity - o(n).
****************************************************************************************************************************************/
void SchedulerClear(scheduler_t *scheduler);









#endif /*SCHEDULER_H*/


