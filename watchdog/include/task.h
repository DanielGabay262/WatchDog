#ifndef TASK_H
#define TASK_H

#include <time.h>
#include <stddef.h>

#include "uid.h"



typedef struct task task_t;



/******************************************************************************************************************************************
                                        				create
*******************************************************************************************************************************************
DESCRIPTION
	create new task.
ARGUMENTS
	time_intrval - time of interval.
	task_func - pointer to function.
RETURN VALUE
	in success - pointer to the new task.
	in failure - NULL.
complexity - o(1).
*****************************************************************************************************************************************/
task_t *TaskCreate(size_t time_interval, int(*task_func)(void *param), void *param);




/*****************************************************************************************************************************************
                                        				Destroy
******************************************************************************************************************************************
DESCRIPTION
	free a task.
ARGUMENTS
	task - pointer to task.
RETURN VALUE
	none.
complexity - o(1).
****************************************************************************************************************************************/
void TaskDestroy(task_t *task);






/****************************************************************************************************************************************
                                        				Run
*****************************************************************************************************************************************
DESCRIPTION
	run a task.
ARGUMENTS
	task - pointer to task.
RETURN VALUE
	in success - 0.
	in failure - 1.
complexity - o(1).
****************************************************************************************************************************************/
int TaskRun(task_t *task);






/****************************************************************************************************************************************
                                        				GetExeTime
*****************************************************************************************************************************************
DESCRIPTION
	return the task execution time.
ARGUMENTS
	task - pointer to task
RETURN VALUE
	execution time.
complexity - o(1).
****************************************************************************************************************************************/
time_t TaskGetExeTime(const task_t *task);






/****************************************************************************************************************************************
                                        				UpdateTimeToRun
*****************************************************************************************************************************************
DESCRIPTION
	update the task execution time.
ARGUMENTS
	task - pointer to task.
RETURN VALUE
	none.
complexity - o(1).
****************************************************************************************************************************************/
void TaskUpdateTimeToRun(task_t *task);





/****************************************************************************************************************************************
                                        				GetUid
*****************************************************************************************************************************************
DESCRIPTION
	return the uid of a task.
ARGUMENTS
	task - pointer to task.
RETURN VALUE
	the uid.
complexity - o(1).
****************************************************************************************************************************************/
ilrd_uid_t TaskGetUid(const task_t *task);





/****************************************************************************************************************************************
                                        				Cmp
*****************************************************************************************************************************************
DESCRIPTION
	compare between the execution time of two tasks.
ARGUMENTS
	task1 - pointer to task.
	task2 - pointer to task.
RETURN VALUE
	1 - task1 is bigger.
	0 - equal.
	-1 - task2 is bigger.
complexity - o(1).
****************************************************************************************************************************************/
int TaskCmp(const void *task1, const void *task2);








#endif /*TASK_H*/









